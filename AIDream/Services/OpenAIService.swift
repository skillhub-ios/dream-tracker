import Foundation
import SwiftUI
 
class OpenAIService: ObservableObject {
    private let apiKey: String
    private let baseURL = "https://api.openai.com/v1/chat/completions"
    
    @Published var isProcessing = false
    @Published var error: Error?
    
    init(apiKey: String = Constants.openAIKey) {
        self.apiKey = apiKey
    }
    
    func sendMessage(_ message: String, context: [Message] = []) async throws -> String {
        isProcessing = true
        defer { isProcessing = false }
        
        var request = URLRequest(url: URL(string: baseURL)!)
        request.httpMethod = "POST"
        request.setValue("Bearer \(apiKey)", forHTTPHeaderField: "Authorization")
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        
        var messages: [[String: String]] = [
            ["role": "system", "content": "–¢—ã - –æ–ø—ã—Ç–Ω—ã–π —Å–æ–Ω–Ω–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ —Å–Ω–æ–≤ –∏ –∏—Ö –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."]
        ]
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        for msg in context {
            messages.append(["role": msg.role.rawValue, "content": msg.content])
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages.append(["role": Role.user.rawValue, "content": message])
        
        let requestBody: [String: Any] = [
            "model": "gpt-3.5-turbo",
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 1000
        ]
        
        request.httpBody = try JSONSerialization.data(withJSONObject: requestBody)
        
        let (data, response) = try await URLSession.shared.data(for: request)
        
        guard let httpResponse = response as? HTTPURLResponse else {
            throw URLError(.badServerResponse)
        }

        guard (200...299).contains(httpResponse.statusCode) else {
            let statusCode = httpResponse.statusCode
            let responseBody = String(data: data, encoding: .utf8) ?? "<no body>"

            print("OpenAIService: HTTP error \(statusCode)")
            print("Response body:", responseBody)

            if statusCode == 429 {
                throw OpenAIServiceError.rateLimited
            } else {
                throw OpenAIServiceError.httpError(statusCode: statusCode, body: responseBody)
            }
        }
        
        let decoder = JSONDecoder()
        let openAIResponse = try decoder.decode(OpenAIResponse.self, from: data)
        
        guard let content = openAIResponse.choices.first?.message.content else {
            print("OpenAIService: Cannot parse response", String(data: data, encoding: .utf8) ?? "<no data>")
            throw URLError(.cannotParseResponse)
        }
        
        return content
    }
    
    // MARK: - Tag selection logic
    private let availableTags: [String] = [
        "Daydream", "Epic Dream", "Continuous Dream", "Prophetic Dream", "Nightmare",
        "Night Terror", "Lucid Dream", "False Awakening", "Supernatural Dream",
        "Telepathic Dream", "Creative Dream", "Healing Dream", "Sleep Paralysis"
    ]
    
    private func selectTags(for summary: String, interpretation: String) -> [String] {
        let lowercased = (summary + " " + interpretation).lowercased()
        var matched: [String] = []
        let tagKeywords: [String: [String]] = [
            "Daydream": ["–¥–Ω–µ–≤–Ω–æ–π", "–º–µ—á—Ç–∞", "—Ñ–∞–Ω—Ç–∞–∑–∏—è"],
            "Epic Dream": ["—ç–ø–∏—á–µ—Å–∫–∏–π", "–≥—Ä–∞–Ω–¥–∏–æ–∑–Ω—ã–π", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ"],
            "Continuous Dream": ["–ø—Ä–æ–¥–æ–ª–∂–∞—é—â–∏–π—Å—è", "—Å–µ—Ä–∏—è", "–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è"],
            "Prophetic Dream": ["–ø—Ä–æ—Ä–æ—á–µ—Å–∫–∏–π", "–±—É–¥—É—â–µ–µ", "–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ"],
            "Nightmare": ["–∫–æ—à–º–∞—Ä", "—É–∂–∞—Å", "—Å—Ç—Ä–∞—Ö"],
            "Night Terror": ["–ø–∞–Ω–∏–∫–∞", "—É–∂–∞—Å –Ω–æ—á—å—é", "—Ç–µ—Ä—Ä–æ—Ä"],
            "Lucid Dream": ["–æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π", "–∫–æ–Ω—Ç—Ä–æ–ª—å", "–ø–æ–Ω–∏–º–∞–Ω–∏–µ —Å–Ω–∞"],
            "False Awakening": ["–ª–æ–∂–Ω–æ–µ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ", "–ø—Ä–æ—Å–Ω—É–ª—Å—è –≤–æ —Å–Ω–µ"],
            "Supernatural Dream": ["—Å–≤–µ—Ä—Ö—ä–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π", "–º–∏—Å—Ç–∏–∫–∞", "–º–∞–≥–∏—è"],
            "Telepathic Dream": ["—Ç–µ–ª–µ–ø–∞—Ç–∏—è", "–º—ã—Å–ª–∏ –¥—Ä—É–≥–∏—Ö"],
            "Creative Dream": ["—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ", "–∏–¥–µ—è", "—Å–æ–∑–∏–¥–∞–Ω–∏–µ"],
            "Healing Dream": ["–∏—Å—Ü–µ–ª–µ–Ω–∏–µ", "–≤—ã–∑–¥–æ—Ä–æ–≤–ª–µ–Ω–∏–µ", "–ª–µ—á–µ–Ω–∏–µ"],
            "Sleep Paralysis": ["–ø–∞—Ä–∞–ª–∏—á", "–Ω–µ –º–æ–≥—É –¥–≤–∏–≥–∞—Ç—å—Å—è", "—Å–æ–Ω–Ω—ã–π –ø–∞—Ä–∞–ª–∏—á"]
        ]
        for (tag, keywords) in tagKeywords {
            if keywords.contains(where: { lowercased.contains($0) }) {
                matched.append(tag)
            }
        }
        // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å –ø–µ—Ä–≤—ã–µ –¥–≤–∞
        if matched.isEmpty { return Array(availableTags.prefix(2)) }
        return Array(matched.prefix(2))
    }
    
    func interpretDream(_ content: String) async throws -> DreamInterpretation {
        let prompt = """
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Å–æ–Ω –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –µ–≥–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        
        –°–æ–Ω: \(content)
        
        –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
        {
            \"title\": \"–ö—Ä–∞—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–∞ (–Ω–µ –±–æ–ª–µ–µ —Ç—Ä–µ—Ö —Å–ª–æ–≤)\",
            \"summary\": \"–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å–Ω–∞\",
            \"symbols\": [
                {
                    \"symbol\": \"[–ò—Å–ø–æ–ª—å–∑—É–π –æ–¥–Ω—É –∏–∑ —ç—Ç–∏—Ö —ç–º–æ–¥–∑–∏: üêç, üåä, üå≥, üîÆ, ü¶ã, üåô, ‚≠ê, üèîÔ∏è, üåä, üî•]\",
                    \"meaning\": \"–ó–Ω–∞—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ\"
                },
                {
                    \"symbol\": \"[–ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥—É—é —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞]\",
                    \"meaning\": \"–ó–Ω–∞—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ\"
                },
                {
                    \"symbol\": \"[–ò—Å–ø–æ–ª—å–∑—É–π —Ç—Ä–µ—Ç—å—é —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞]\",
                    \"meaning\": \"–ó–Ω–∞—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ\"
                }
            ],
            \"emotionalAnalysis\": \"–ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è\",
            \"recommendations\": [
                \"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1\",
                \"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2\"
            ],
            \"tags\": [\"–¢–µ–≥1\", \"–¢–µ–≥2\"],
            \"quote\": \"–¶–∏—Ç–∞—Ç–∞ –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –æ —Å–Ω–∞—Ö, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ —Å–Ω–∞\"
        }
        
        –ò—Å–ø–æ–ª—å–∑—É–π —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.
        –í–∞–∂–Ω–æ: 
        1. –í –ø–æ–ª–µ \"symbol\" –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞.
        2. –î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–æ–≤–Ω–æ —Ç—Ä–∏ —Å–∏–º–≤–æ–ª–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —ç–º–æ–¥–∑–∏.
        3. –ó–Ω–∞—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º –∏–ª–∏ —á–µ—Ä–µ–∑ —Ç–∏—Ä–µ.
        4. –í –ø–æ–ª–µ \"quote\" –∏—Å–ø–æ–ª—å–∑—É–π —Ä–µ–∞–ª—å–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –§—Ä–µ–π–¥–∞, –Æ–Ω–≥–∞, –ê–¥–ª–µ—Ä–∞) –æ —Å–Ω–∞—Ö, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–Ω–∞.
        5. –ù–∞–∑–≤–∞–Ω–∏–µ —Å–Ω–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∞—Ç–∫–∏–º –∏ –µ–º–∫–∏–º, –Ω–µ –±–æ–ª–µ–µ —Ç—Ä–µ—Ö —Å–ª–æ–≤.
        """
        
        let response = try await sendMessage(prompt)
        
        guard let jsonData = response.data(using: .utf8) else {
            print("OpenAIService: Cannot convert response to data", response)
            throw URLError(.cannotParseResponse)
        }
        
        let decoder = JSONDecoder()
        return try decoder.decode(DreamInterpretation.self, from: jsonData)
    }
}

// MARK: - Response Models
enum OpenAIServiceError: Error {
    case rateLimited
    case httpError(statusCode: Int, body: String)
}

private struct OpenAIResponse: Codable {
    let choices: [Choice]
    
    struct Choice: Codable {
        let message: Message
    }
} 
